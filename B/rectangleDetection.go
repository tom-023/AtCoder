// 問題文
// 高橋くんは、以下の方法で 10 個の文字列 S1,S2,…,S10を生成しました。

// まず、 Si(1≤i≤10)= .......... ( . が 10 個並んだ文字列) とする。
// 次に、以下の条件を全て満たす 4 つの整数 A,B,C,D を選ぶ。
// 1≤A≤B≤10
// 1≤C≤D≤10
// その後、以下の条件を全て満たす全ての整数組 (i,j) について、 Siの j 文字目を # に書き換える。
// A≤i≤B
// C≤j≤D
// 以上の方法で生成された S1,S2,…,S10が与えられるので、高橋くんが選んだ整数 A,B,C,D を求めてください。
// なお、制約より A,B,C,D は一意に定まる (答えはただひとつ存在する) ことが証明できます。

// 制約
// S1,S2,…,S10は問題文中の方法で生成されうるそれぞれ長さ 10 の文字列
// 入力
// 入力は以下の形式で標準入力から与えられる。

// S
// 1
// ​

// S
// 2
// ​

// ⋮
// S
// 10
// ​

// 出力
// 答えを以下の形式で出力せよ。

// A B
// C D
// 入力例 1
// Copy
// ..........
// ..........
// ..........
// ..........
// ...######.
// ...######.
// ...######.
// ...######.
// ..........
// ..........
// 出力例 1
// Copy
// 5 8
// 4 9
// 高橋くんが選んだ整数は A=5,B=8,C=4,D=9 です。
// このように選ぶことにより、 S
// 5
// ​
//  ,S
// 6
// ​
//  ,S
// 7
// ​
//  ,S
// 8
// ​
//   の 4 文字目から 9 文字目が # であり他の文字が . である 10 個の長さ 10 の文字列 S
// 1
// ​
//  ,S
// 2
// ​
//  ,…,S
// 10
// ​
//   が生成されます。
// これは入力で与えられた 10 個の文字列と一致します。

// 入力例 2
// Copy
// ..........
// ..#.......
// ..........
// ..........
// ..........
// ..........
// ..........
// ..........
// ..........
// ..........
// 出力例 2
// Copy
// 2 2
// 3 3
// 入力例 3
// Copy
// ##########
// ##########
// ##########
// ##########
// ##########
// ##########
// ##########
// ##########
// ##########
// ##########
// 出力例 3
// Copy
// 1 10
// 1 10

package main

import (
	"bufio"
	"fmt"
	"os"
)

var scanner = bufio.NewScanner(os.Stdin)

const N = 10

func scan() string {
	scanner.Scan()
	return scanner.Text()
}

func rectangleDetection() {
	scanner.Split(bufio.ScanWords)
	f := [][]byte{}
	for i := 0; i < N; i++ {
		f = append(f, []byte(scan()))
	}

	a, b, c, d := 10, 0, 10, 0

	for i, array := range f {
		for j, uni := range array {
			if uni == '#' {
				a = min(a, i+1)
				b = max(b, i+1)
				c = min(c, j+1)
				d = max(d, j+1)
			}
		}
	}
	fmt.Printf("%d %d\n", a, b)
	fmt.Printf("%d %d", c, d)
}

func min(a, b int) int {
	if a > b {
		return b
	} else {
		return a
	}
}

func max(a, b int) int {
	if a > b {
		return a
	} else {
		return b
	}
}
